import pandas as pd
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score,precision_score, recall_score
from sklearn.model_selection import StratifiedKFold
import numpy as np

file_path_train = r"C:\Users\Gianmarco\Downloads\data_train.csv"
data_train = pd.read_csv(file_path_train)
file_path_test = r"C:\Users\Gianmarco\Downloads\data_test.csv"
data_test = pd.read_csv(file_path_test)


target_column = 'TARGET'
selected_features = ['POINT_OF_SALE_NUM', 'N_SUBSCRIPTIONS', 'PRICE','PHONE_NUMBER','PROP_CONBINI','PAYMENT_TYPE_NUM','FAV_GENRE_NUM','AGE_NUM','DAYS_FROM_PROMO','BOOKS_PAID','N_TRANSACTIONS','N_ITEMS','DATE_LAST_PURCHASE','CUSTOMER_SINCE','MAIL','SUBSCR_CANC','MARGIN']
X_train = data_train[selected_features]
y = data_train[target_column]
X_test = data_test[selected_features]

scaler = MinMaxScaler()
X_train_normalized = scaler.fit_transform(X_train)

X_test_normalized = scaler.fit_transform(X_test)        

k_fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)


thresholds_to_try = [0.1, 0.12, 0.14,0.16,0.18,0.2]


for fold, (train_idx, valid_idx) in enumerate(k_fold.split(X_train_normalized, y)):
    
    X_train_fold, X_valid_fold = X_train_normalized[train_idx], X_train_normalized[valid_idx]
    y_train_fold, y_valid_fold = y.iloc[train_idx], y.iloc[valid_idx]

    model = LogisticRegression()
    model.fit(X_train_fold, y_train_fold)
    
    best_f1 = 0
    best_threshold = 0
    thresholds=[]
    for threshold in thresholds_to_try:
        probabilities = model.predict_proba(X_valid_fold)
        predictions = (probabilities[:, 1] > threshold).astype(int)
        f1 = f1_score(y_valid_fold, predictions)
        if f1 > best_f1:
            best_f1 = f1
            best_threshold = threshold
        thresholds.append(threshold)    

    print(f"Fold {fold + 1}: Best Threshold = {best_threshold}, Best F1 Score = {best_f1}")



model = LogisticRegression()
model.fit(X_train_normalized,y)

final_threshold=np.mean(thresholds)


probabilities = model.predict_proba(X_test_normalized)
predictions = (probabilities[:, 1] > final_threshold).astype(int)


results_df = pd.DataFrame({
    'EVENT_ID': data_test['EVENT_ID'],
    'PREDICTED_TARGET': predictions[:],
       
})

results_df.to_csv(r"C:\Users\Gianmarco\Downloads\results.csv", index=False)



